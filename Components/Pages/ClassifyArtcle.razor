@page "/classifyArtcle"
@using HexoBlog.Model
@using HexoBlog.Service
@using System.Net;
@using System.Linq;
@inject ClassifyService CategoryService
@inject NavigationManager NavigationManager




@if (CategoryService.TagsInfo.Count == 0)
{
    <p>Loading...</p>
}
else
{
    <ul>
        @foreach (var category in CategoryService.TagsInfo.PostList)
        {
            <li>
                <a href="#" @onclick="() => GoToArticle(category.Title,category.Path)">@category.Title</a>
                <p>Path: @category.Title</p>
                <p>Path: @category.Path</p>
        
            </li>
        }
    </ul>
}

@code {
    [Parameter]
    public string Name { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // 获取当前的 URI
        var uri = NavigationManager.Uri;

        // 解析查询字符串
        var queryParameters = new Uri(uri).Query.TrimStart('?').Split('&');
        var json = "";
        // 遍历查询字符串参数，并找到 name 参数的值
        foreach (var parameter in queryParameters)
        {
            var keyValue = parameter.Split('=');
            if (keyValue.Length == 2 && keyValue[0] == "name")
            {
                Name = keyValue[1];

                string decodedString = WebUtility.UrlDecode(Name);
                json = decodedString.Split('/').Last();
                System.Diagnostics.Debug.WriteLine($"Title {json}");
                break;
            }
        }

        await CategoryService.LoadTagArticleAsync(json);
    }


    private void GoToArticle(string categoryName, string path)
    {
        // 根据categoryName构建name参数
        var name = $"{categoryName}.json";
        System.Diagnostics.Debug.WriteLine($"categoryName {categoryName}");
        System.Diagnostics.Debug.WriteLine($"path {path}");
        // 导航到articles页面并传递参数
        NavigationManager.NavigateTo($"articles?name={name}");
    }
    // 用于处理导航事件的方法（可选，如果不需要在点击时执行其他操作，可以移除）
    private void NavigateToArticle()
    {
        // 这里可以执行一些在点击链接前的逻辑，比如确认对话框等
        // 如果不需要，这个方法可以留空
    }
}